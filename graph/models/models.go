// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"todo/ent"
)

type TodosQueryInput struct {
	After   *ent.Cursor         `json:"after"`
	First   *int                `json:"first"`
	Before  *ent.Cursor         `json:"before"`
	Last    *int                `json:"last"`
	OrderBy *ent.TodoOrder      `json:"orderBy"`
	Where   *ent.TodoWhereInput `json:"where"`
}

type UsersQueryInput struct {
	After   *ent.Cursor         `json:"after"`
	First   *int                `json:"first"`
	Before  *ent.Cursor         `json:"before"`
	Last    *int                `json:"last"`
	OrderBy *ent.UserOrder      `json:"orderBy"`
	Where   *ent.UserWhereInput `json:"where"`
}

type Event string

const (
	EventCreate Event = "CREATE"
	EventUpdate Event = "UPDATE"
	EventDelete Event = "DELETE"
)

var AllEvent = []Event{
	EventCreate,
	EventUpdate,
	EventDelete,
}

func (e Event) IsValid() bool {
	switch e {
	case EventCreate, EventUpdate, EventDelete:
		return true
	}
	return false
}

func (e Event) String() string {
	return string(e)
}

func (e *Event) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Event(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Event", str)
	}
	return nil
}

func (e Event) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
